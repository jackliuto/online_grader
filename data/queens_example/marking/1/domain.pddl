
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Domain file automatically generated by the Tarski FSTRIPS writer
;;; 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (domain Dungeon)
    (:requirements :negative-preconditions :typing :equality)
    (:types
        location - object
        colour - object
        key - object
        corridor - object
        object
    )

    (:constants
        
    )

    (:predicates
        (domain1_hero-at ?x1 - location)
        (domain1_in ?x1 - key ?x2 - location)
        (domain1_connected ?x1 - location ?x2 - corridor)
        (domain1_risky ?x1 - corridor)
        (domain1_locked ?x1 - corridor ?x2 - colour)
        (domain1_arm-free )
        (domain1_holding ?x1 - key)
        (domain1_key-colour ?x1 - key ?x2 - colour)
        (domain1_two-use ?x1 - key)
        (domain1_one-use ?x1 - key)
        (domain1_no-use ?x1 - key)
        (domain1_messy ?x1 - location)
        (domain2_hero-at ?x1 - location)
        (domain2_connected ?x1 - location ?x2 - corridor)
        (domain2_corridor-between ?x1 - location ?x2 - location ?x3 - corridor)
        (domain2_locked ?x1 - corridor)
        (domain2_lock-colour ?x1 - corridor ?x2 - colour)
        (domain2_messy ?x1 - location)
        (domain2_collapsed ?x1 - corridor)
        (domain2_risky ?x1 - corridor)
        (domain2_key-at ?x1 - key ?x2 - location)
        (domain2_key-usable ?x1 - key)
        (domain2_key-single-use ?x1 - key)
        (domain2_key-double-use ?x1 - key)
        (domain2_key-colour ?x1 - key ?x2 - colour)
        (domain2_holding ?x1 - key)
        (domain2_arm-free )
        (failed )
    )

    (:functions
        
    )

    

    
    (:action move
     :parameters (?from - location ?to - location ?cor - corridor)
     :precondition (and (and (domain1_connected ?from ?cor) (domain1_connected ?to ?cor) (domain1_hero-at ?from) (not (= ?from ?to)) (forall (?col - colour) (not (domain1_locked ?cor ?col)))) (and (domain2_hero-at ?from) (domain2_corridor-between ?from ?to ?cor) (not (domain2_locked ?cor)) (not (domain2_collapsed ?cor))))
     :effect (and
        (domain1_hero-at ?to)
        (not (domain1_hero-at ?from))
        (when (domain1_risky ?cor) (domain1_messy ?to))
        (when (domain1_risky ?cor) (not (domain1_connected ?from ?cor)))
        (when (domain1_risky ?cor) (not (domain1_connected ?to ?cor)))
        (domain2_hero-at ?to)
        (not (domain2_hero-at ?from))
        (when (domain2_risky ?cor) (domain2_messy ?to))
        (when (domain2_risky ?cor) (domain2_collapsed ?cor)))
    )


    (:action pick-up
     :parameters (?loc - location ?k - key)
     :precondition (and (and (domain1_hero-at ?loc) (domain1_in ?k ?loc) (domain1_arm-free ) (not (domain1_messy ?loc))) (and (domain2_hero-at ?loc) (domain2_key-at ?k ?loc) (domain2_arm-free ) (not (domain2_messy ?loc))))
     :effect (and
        (domain1_holding ?k)
        (not (domain1_in ?k ?loc))
        (not (domain1_arm-free ))
        (domain2_holding ?k)
        (not (domain2_arm-free ))
        (not (domain2_key-at ?k ?loc)))
    )


    (:action drop
     :parameters (?loc - location ?k - key)
     :precondition (and (and (domain1_holding ?k) (domain1_hero-at ?loc)) (and (not (domain2_arm-free )) (domain2_holding ?k) (domain2_hero-at ?loc)))
     :effect (and
        (not (domain1_holding ?k))
        (domain1_in ?k ?loc)
        (domain1_arm-free )
        (domain2_arm-free )
        (not (domain2_holding ?k))
        (domain2_key-at ?k ?loc))
    )


    (:action unlock
     :parameters (?loc - location ?cor - corridor ?col - colour ?k - key)
     :precondition (and (and (domain1_locked ?cor ?col) (domain1_holding ?k) (domain1_key-colour ?k ?col) (domain1_hero-at ?loc) (domain1_connected ?loc ?cor) (not (domain1_no-use ?k))) (and (domain2_holding ?k) (domain2_key-usable ?k) (domain2_locked ?cor) (domain2_lock-colour ?cor ?col) (domain2_key-colour ?k ?col) (domain2_hero-at ?loc) (domain2_connected ?loc ?cor)))
     :effect (and
        (not (domain1_locked ?cor ?col))
        (when (domain1_two-use ?k) (not (domain1_two-use ?k)))
        (when (domain1_two-use ?k) (domain1_one-use ?k))
        (when (domain1_one-use ?k) (not (domain1_one-use ?k)))
        (when (domain1_one-use ?k) (domain1_no-use ?k))
        (not (domain2_locked ?cor))
        (when (domain2_key-single-use ?k) (not (domain2_key-single-use ?k)))
        (when (domain2_key-single-use ?k) (not (domain2_key-usable ?k)))
        (when (domain2_key-double-use ?k) (not (domain2_key-double-use ?k)))
        (when (domain2_key-double-use ?k) (domain2_key-single-use ?k)))
    )


    (:action clean
     :parameters (?loc - location)
     :precondition (and (and (domain1_hero-at ?loc) (domain1_messy ?loc)) (and (domain2_hero-at ?loc) (domain2_messy ?loc)))
     :effect (and
        (not (domain1_messy ?loc))
        (not (domain2_messy ?loc)))
    )


    (:action fail_move1
     :parameters (?from - location ?to - location ?cor - corridor)
     :precondition (and (not (and (domain2_hero-at ?from) (domain2_corridor-between ?from ?to ?cor) (not (domain2_locked ?cor)) (not (domain2_collapsed ?cor)))) (and (domain1_connected ?from ?cor) (domain1_connected ?to ?cor) (domain1_hero-at ?from) (not (= ?from ?to)) (forall (?col - colour) (not (domain1_locked ?cor ?col)))))
     :effect (and
        (failed ))
    )


    (:action fail_pick-up1
     :parameters (?loc - location ?k - key)
     :precondition (and (not (and (domain2_hero-at ?loc) (domain2_key-at ?k ?loc) (domain2_arm-free ) (not (domain2_messy ?loc)))) (and (domain1_hero-at ?loc) (domain1_in ?k ?loc) (domain1_arm-free ) (not (domain1_messy ?loc))))
     :effect (and
        (failed ))
    )


    (:action fail_drop1
     :parameters (?loc - location ?k - key)
     :precondition (and (not (and (not (domain2_arm-free )) (domain2_holding ?k) (domain2_hero-at ?loc))) (and (domain1_holding ?k) (domain1_hero-at ?loc)))
     :effect (and
        (failed ))
    )


    (:action fail_unlock1
     :parameters (?loc - location ?cor - corridor ?col - colour ?k - key)
     :precondition (and (not (and (domain2_holding ?k) (domain2_key-usable ?k) (domain2_locked ?cor) (domain2_lock-colour ?cor ?col) (domain2_key-colour ?k ?col) (domain2_hero-at ?loc) (domain2_connected ?loc ?cor))) (and (domain1_locked ?cor ?col) (domain1_holding ?k) (domain1_key-colour ?k ?col) (domain1_hero-at ?loc) (domain1_connected ?loc ?cor) (not (domain1_no-use ?k))))
     :effect (and
        (failed ))
    )


    (:action fail_clean1
     :parameters (?loc - location)
     :precondition (and (not (and (domain2_hero-at ?loc) (domain2_messy ?loc))) (and (domain1_hero-at ?loc) (domain1_messy ?loc)))
     :effect (and
        (failed ))
    )


    (:action fail_move2
     :parameters (?from - location ?to - location ?cor - corridor)
     :precondition (and (not (and (domain1_connected ?from ?cor) (domain1_connected ?to ?cor) (domain1_hero-at ?from) (not (= ?from ?to)) (forall (?col - colour) (not (domain1_locked ?cor ?col))))) (and (domain2_hero-at ?from) (domain2_corridor-between ?from ?to ?cor) (not (domain2_locked ?cor)) (not (domain2_collapsed ?cor))))
     :effect (and
        (failed ))
    )


    (:action fail_pick-up2
     :parameters (?loc - location ?k - key)
     :precondition (and (not (and (domain1_hero-at ?loc) (domain1_in ?k ?loc) (domain1_arm-free ) (not (domain1_messy ?loc)))) (and (domain2_hero-at ?loc) (domain2_key-at ?k ?loc) (domain2_arm-free ) (not (domain2_messy ?loc))))
     :effect (and
        (failed ))
    )


    (:action fail_drop2
     :parameters (?loc - location ?k - key)
     :precondition (and (not (and (domain1_holding ?k) (domain1_hero-at ?loc))) (and (not (domain2_arm-free )) (domain2_holding ?k) (domain2_hero-at ?loc)))
     :effect (and
        (failed ))
    )


    (:action fail_unlock2
     :parameters (?loc - location ?cor - corridor ?col - colour ?k - key)
     :precondition (and (not (and (domain1_locked ?cor ?col) (domain1_holding ?k) (domain1_key-colour ?k ?col) (domain1_hero-at ?loc) (domain1_connected ?loc ?cor) (not (domain1_no-use ?k)))) (and (domain2_holding ?k) (domain2_key-usable ?k) (domain2_locked ?cor) (domain2_lock-colour ?cor ?col) (domain2_key-colour ?k ?col) (domain2_hero-at ?loc) (domain2_connected ?loc ?cor)))
     :effect (and
        (failed ))
    )


    (:action fail_clean2
     :parameters (?loc - location)
     :precondition (and (not (and (domain1_hero-at ?loc) (domain1_messy ?loc))) (and (domain2_hero-at ?loc) (domain2_messy ?loc)))
     :effect (and
        (failed ))
    )

)